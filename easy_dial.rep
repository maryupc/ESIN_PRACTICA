//Explicació de la estructura de la trie y perque
/* Aquesta trie es una trie primer_fill-seguent_germà on els nodes estan inserits per
ordre segons el nº de trucades de forma decreixent. El primer nom (el que te més trucade
es una variable a part i no entra a la trie per fer-ho de forma mes eficient. Els altres
nodes s'aniràn inserin per ordre tenint com a clau un caracter. Aquest caracter es sabrá
seguint el metode tradicional d'inserció d'una trie però pararà d'inserir els caracters del
nom inmediatament quan no trobi algun dels caracters de la caracters. En cas de que arribi
al final de la cadena s'afegirà com a clau un #.

Exemple:

MARIA : 10
JOAN : 30
MIQUEL : 25
MARTA : 7
MAR : 2 

Primer aniría JOAN, per tant no s'introduiriía a la trie. Segon aniría MIQUEL, com que no 
existeix cap M la seva clau serà M. Tercer sería MARIA, com que existeix M, crea un fill a 
M i afegeix com a caracter A. Quart sería MARTA, com que existeix M, baixaría al primer fill 
i com existeix A doncs afegiría un fill a A amb clau R. Finalment, com MAR ja es una cadena 
existent a la trie, es crearía un node a baix de tot de la cadena amb un #.

Hem escollit aquest metode perque la forma de consultar els elements es identica que la del 
easy dial, a més a més, es bastant mes eficient en aquest cas en comparació a una trie tradicional 
que es basa en la longitud de la paraula y el numero de nodes. (En aquest cas nomes el seu temps 
de consulta es en base al numero de noms). Fer-ho d'aquest manera també te els seus incombenients
com a la hora de fer el comença: com que cap nom está ordenat lexicograficament a la trie hem hagut
de crear un metode templatitzat amb un algorisme d'ordenacio eficient (merge_sort) per tal de contrarestar
aquesta desavantatge.
*/
struct node_trie {
    char _c;
    node_trie* _seg;
    node_trie* _prf;
    phone _p;
    node_trie(const char &c = '#', const phone &p = phone(), node_trie *seg = nullptr, node_trie *prf = nullptr);
    // Pre: Cert
    // Post: constructor node_trie amb els parametres introduits.
};

node_trie* _arrel;
phone _fav;
phone _actual;
string _prefix;
bool _definit;

node_trie* insert(const phone &p, node_trie *n, nat i);
// Pre: p es un phone no existent dins de la trie de easy_dial.
// Post: insereix p dins de la trie per ordre d'inserció amb clau _k = p.nom()[i] i phone = p i retorna el node.
// Cost: O(n) on n es el nº de nodes a la trie (nº de telefons) 

node_trie* consulta(const string &s, node_trie *n, nat i) const;
// Pre: cert
// Post: si hi es, retorna el punter a node de la trie que coincideix amb la cadena s fins s.size.
// si no hi es, retorna nullptr.
// Cost: O(n) on n es el nº de nodes a la trie (nº de telefons) 

void comencen(const string& pref, vector<string>& result, node_trie *n) const;
// Pre: cert
// Post: Guarda a result els noms dels phones on el seu nom comença per pref.
// Cost: O(n) on n es el nº de nodes a la trie (nº de telefons) 

void rcomencen(vector<string>& result, node_trie *n) const;
// Pre: Cert.
//Post: Guarda a resultat els noms de tots els a partir del node n.
//Cost: O(n) on n es le nº de nodes seguents del node n.

void recorrer_trie(node_trie *n,nat i,double &frqt,double &sum)const;
//Pre: Cert
//Post: sum conté la acumulació que es la suma que conte: (freqüència*número de pulsacions) fetá per a cada telefon de easy_dial.
//      frqt conté la suma de totes les freqüències dels phones en easy_dial.
//Cost: O(n) on n es el nº de nodes al node_trie "n".

void delete_nodes(node_trie *n);
// Pre: Cert
// Post: si n no es null, esborra tots els nodes de n.
// Cost: O(n) on n es el nº de nodes de la trie (nº de telefons).

static node_trie* copy_nodes(node_trie *n);
// Pre: Cert.
// Post: Crea una copia de n i la retorna.
// Cost: O(n) on n es el nº de nodes al node_trie "n".