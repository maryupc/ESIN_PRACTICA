struct node_trie {
    char _c;
    node_trie* _seg;
    node_trie* _prf;
    phone _p;
    node_trie(const char &c = '#', const phone &p = phone(), node_trie *seg = nullptr, node_trie *prf = nullptr);
};

node_trie* _arrel;
phone _fav;
phone _actual;
string _prefix;
bool _definit;

node_trie* insert(const phone &p, node_trie *n, nat i);
// Pre : p es un phone no null.
// Post : 

node_trie* consulta(const string &s, node_trie *n, nat i);
void comencen(const string& pref, vector<string>& result, node_trie *n) const throw(error);
void rcomencen(vector<string>& result, node_trie *n) const throw(error);
void recorrer_trie(node_trie *n,nat i,double &frqt,double &sum)const;
void delete_nodes(node_trie *n);
static node_trie* copy_nodes(node_trie *n);
template< typename T>
void merge_sort(vector<T> &v, int p, int r) const;
template< typename T>
void merge(vector<T> &v, int p, int r, int q) const;
